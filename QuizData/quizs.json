[
  {
    "language": "c",
    "question": "C언어에서 세미콜론(;)은 의무가 아닙니다.\n즉, 사람의 스타일에 따라 적을수도, 안 적을수도 있습니다.",
    "explanation": "의무입니다, C언어 컴파일러(빌더)는 세미콜론으로 문장과 문장을 나눕니다.\n세미콜론을 사용하지 않을경우, 컴파일러가 컴파일(빌드)을 수행하지 못합니다.",
    "answer": false,
    "point": 1
  },
  {
    "language": "js",
    "question": "JavaScript에서 세미콜론은 의무입니다.\n즉, 문장을 끝낼경우 무조건 적어야 합니다.",
    "explanation": "선택 사항입니다, 예시로, JavaScript Standard Style에서는 세미콜론이 없어야 한다는 규칙이 있습니다! (예외사항도 있음)\n[정말](http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding) [없어도](http://inimino.org/~inimino/blog/javascript_semicolons) [됩니다](https://www.youtube.com/watch?v=gsfbh17Ax9I)",
    "answer": false,
    "point": 1
  },
  {
    "language": "c",
    "question": "C언어에서 문자열(String)을 선언할 때, 문자(char.)의 배열(Array)을 사용합니다.",
    "explanation": "사용합니다,```c\nchar string[] = \"This is Char-Array\";```와 같이 문자열을 선언할 수 있습니다!\n하지만 출력은```c\nprintf(\"%s\\n\", string);```으로 간단하게 출력할 수 있습니다!",
    "answer": true,
    "point": 1
  },
  {
    "language": "c",
    "question": "C언어에서 for문은 while문과 선언, 대입으로 대체가 가능합니다.",
    "explanation": "가능합니다, ```c\nfor (int n; n > 10; n++) {\n  printf(\"%d\", n)\n}\n```는 ```c\nint n;\n\nwhile (n > 10) {\n  printf(\"%d\", n)\n  n++;\n}```로 대체 가능합니다.",
    "answer": true,
    "point": 1
  },
  {
    "language": "c",
    "question": "C언어에서 for문의 소괄호()의 구성요소는 왼쪽부터 '선언; 조건; 대입'순입니다.",
    "explanation": "맞습니다. 또한, 구성요소를 무조건 다 적지 않고 빈칸으로 놔두어도 됩니다.",
    "answer": true,
    "point": 1
  },
  {
    "language": "c#",
    "question": "C#에서 조건문 if에는 무조건 중괄호가 있어야 합니다.",
    "explanation": "있어야 합니다, 기본적으로는\n\nif (조건식)\n{실행 문장}\n\n이지만 실행되는 문장이 하나일 경우\n\nif (조건식) 실행 문장\n\n으로 중괄호를 빼는 것이 가능합니다.",
    "answer": false,
    "point": 1
  },
  {
    "language": "c#",
    "question": "C#에서 다중 if문은 switch문으로 바꿀(대체할) 수 있습니다.",
    "explanation": "바꿀 수 있습니다, 예를 들어\n```cs\nint a = 3;\nif (a == 1)\n\n{\n    Console.WriteLine(\"변수 a는  1\");\n\n}\nelse if (a == 2)\n{\n    Console.WriteLine(\"변수 a는 2\");\n}\nelse if (a == 3)\n{\n    Console.WriteLine(\"변수 a는 3\");\n}\nelse\n{\n    Console.WriteLine(\"기타\")\n}\n//출력결과: 변수 a는 3```를 ```cs\nint a = 3;\nswitch (a)\n{\ncase 1:\n    Console.WriteLine(\"변수 a는 1\");\n    break;\ncase 2:\n    Console.WriteLine(\"변수 a는 2\");\n    break;\ncase 3:\n    Console.WriteLine(\"변수 a는 3\");\n    break;\ndefault:\n    Console.WriteLine(\"기타\");\n    break;\n}\n\n//출력 결과: 변수 a는 3```로 바꿀 수 있습니다.",
    "answer": true,
    "point": 1
  },
  {
    "language": "general",
    "question": "프로그래밍에서 \"x = x + 2\"를 개산하면 1이 나옵니다.",
    "explanation": "아닙니다, 프로그래밍은 수학이 아닙니다!\n저 식은 방정식이 아닌, ```fix\nx를 앞에서 정해진 x에 2를 더한 값으로 정하시오.```라는 뜻입니다.",
    "answer": false,
    "point": 1
  },
  {
    "language": "js",
    "question": "JavaScript에서 모든 자료형은 함수로 이루어져 있습니다.",
    "explanation": "아닙니다, JS 공식 레퍼런스인 https://developer.mozilla.org/ko/docs/Web/JavaScript/Data_structures 에서도 Object를 따로 분류하고 있으며, ```js\ntypeof 0 === typeof (new Number())\n``` 역시 false(거짓)이 나오는 것을 알 수 있습니다.",
    "answer": false,
    "point": 2
  },
  {
    "language": "js",
    "question": "JavaScript에서 ```js\nvar a = \"30\"\na += true\na += 1 + 2\nconsole.log(a)```를 했을때, 출력은```\n> 34```이다.",
    "explanation": "\"30true3\"으로 출력됩니다, 이유는 다음과 같습니다.```diff\n+ a가 30이라는 *문자열*입니다.\n+ *문자열*에 *참/거짓*을 넣으려 할때, JS는 *참/거짓*을 *문자열*로 바꿔 맨뒤에 놓습니다.\n+ *문자열*에 *숫자*를 넣으려고 할때, JS는 *숫자*를 문자열으로 바꿔 맨뒤에 놓습니다.\n```",
    "answer": false,
    "point": 2
  },
  {
    "language": "c#",
    "question": "C#에서 ```csharp\ndynamic c = \"20\";\nc = false;\nc = 1 + 2;\nConsole.WriteLine(c.Getype);```를 했을때, 출력은```\n> System.Int32```입니다.",
    "explanation": "맞습니다, dynamic은 C#에서 지원하는 인터프리터의 기능입니다.\n그래서 변수 타입을 그때그때 계속 바꿀 수 있기에 출력하기 바로 전에 지정이 된\nint (System.Int32)로 변환되어 저렇게 표시되는 것입니다.",
    "answer": true,
    "point": 2
  },
  
  {
    "language": "html",
    "question": "html에서 줄바꿈을 하려고 하면 <br>을 입력해야 한다.",
    "explanation": "맞습니다, html에서는 키보드의 Enter를 입력해도 인식이 안 되고, 개발자가 보기 편할 수 있도록 하는 수단이기 때문입니다.\n글의 내용에서 줄바꿈을 하려고 하면 Enter 대신 <br>이나 문장을 <p> 등의 테그에 감싸 입력해야 합니다.",
    "answer": true,
    "point": 1
  },
  {
    "language": "general",
    "question": "{username}(은)는 심심하여 아래의 그림과 같은 논리게이트를 가지고 놀고 있었습니다.\n이때, 그가 A부분에 전기를 흘려보내고 B부분에는 전기를 흘려보내지 않는다면, Q에는 전기가 흐릅니다.",
    "explanation": "흐르지 않습니다, 이 논리게이트는 [And 게이트](https://ko.wikipedia.org/wiki/AND_%EA%B2%8C%EC%9D%B4%ED%8A%B8)로서 A와 B부분이 모두 전기가 흘러야 Q에 전기가 흐르게 됩니다",
    "answer": false,
    "image": "https://upload.wikimedia.org/wikipedia/commons/thumb/b/b9/AND_ANSI_Labelled.svg/1920px-AND_ANSI_Labelled.svg.png",
    "point": 3
  },
  {
    "language": "general",
    "question": "{username}(은)는 심심하여 아래의 그림과 같은 논리게이트를 가지고 놀고 있었습니다.\n이때, 그가 A부분에 전기를 흘려보내고 B부분에는 전기를 흘려보내지 않는다면, Q에는 전기가 흐릅니다.",
    "explanation": "흐릅니다, 이 논리게이트는 [Or 게이트](https://ko.wikipedia.org/wiki/OR_%EA%B2%8C%EC%9D%B4%ED%8A%B8)로서 A와 B부분중 하나만 전기가 흘러도 Q에 전기가 흐르게 됩니다",
    "answer": true,
    "image": "https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/OR_ANSI_Labelled.svg/1280px-OR_ANSI_Labelled.svg.png",
    "point": 3
  },
  {
    "language": "c#",
    "question": "int는 32비트 정수이다",
    "explanation": "맞습니다, int 범위는 2,147,483,647이 최대입니다.\n만약 하나이라도 넘으면 –2,147,483,648 되기 때문에 주의하세요",
    "answer": true,
    "point": 2
  },
  {
    "language": "c++",
    "question": "```cpp\n#include <stdio.h>\n\nint main()\n{\n    printf(\"Hello World\");\n}```\n```cpp\n#include <iostream>\nusing namespace std;\nint main()\n{\n    cout << \"Hello World!\" << endl;\n}\n```\n이 2가지의 소스는 모두 Hello World! 를 출력하는 소스입니다.",
    "answer": true,
    "explanation": "맞습니다, 직접 해보시는 게 좋습니다.(?)",
    "point": 2
  },
  {
    "language": "py3",
    "question": "raise 함수를 사용할 때는 ```\npython\nraise 'ValueError'\n```와 같이 사용해야 한다",
    "answer": false,
    "explanation": "아닙니다, raise 함수는 ```python\nraise ValueError```와 같이 따옴표가 필요 없습니다.",
    "point": 2
  },
  {
    "language": "js",
    "question": "```js\nfunction test() {\n  this.asdf = 'asdf'\n  console.log(this.asdf)\n}\n\ntest()\nconsole.log(asdf)\n```를 했을 때 오류가 나지 않는다.",
    "answer": true,
    "explanation": "오류가 나지 않습니다, class(prototype)이 아닐 때에는 this가 global로 사용됩니다. 즉, `this.asdf = 'asdf'`가 `global.asdf = 'asdf'`가 되는것이죠. 그때 외부에서 부른 `console.log(asdf)`는 `console.log(global.asdf)`와 같은것이고, 이는 사용할 수 있으니 오류가 나지 않습니다.",
    "point": 2
  },
  {
    "language": "js",
    "question": "자바스크립트와 자바는 같은 언어이다",
    "answer": false,
    "explanation": "아닙니다, 자바스크립트와 자바는 인도와 인도네시아처럼 이름만 비슷한 것입니다",
    "point": 1
  },
  {
    "language": "c",
    "question": "c언어에서 표준출력(stdout)을 하려면 printf 명령어를 사용하면 된다.",
    "answer": true,
    "explanation": "맞습니다,  c언어에서 표준출력을 하는 방법은 put이나 print, printf등의 함수를 사용해야 합니다",
    "point": 1
  },
  {
    "language": "general",
    "question": "HTTPS는 HTTP보다 보안이 강하다.",
    "answer": true,
    "explanation": "맞습니다, HTTPS는 SSL위에서 작동하기 때문에 당연히 HTTP보다 보안이 강합니다.",
    "point": 1
  },
  {
    "language": "aheui",
    "question": "아희는 한글로 작성한다.",
    "answer": true,
    "explanation": "맞습니다, 아희는 한글로 된 언어이기 때문에 당연히 한글로 작성합니다.",
    "point": 2
  },
  {
    "language": "js",
    "question": "const, let와 var은 모두 \"똑같은 기능\"을 가진 선언문이다.",
    "answer": false,
    "explanation": "모두 다른 기능입니다. const는 똑같은 이름을 가진 선언문이 있다면 오류를 뜨게 해 겹쳐서는 안 될 모듈을 불러오는데 적합하며, let는 해당 scope(e.g: if(...) { let y = null }, 여기서 scope는 {}) 안에서만 효력을 가지며 var은 선언이 scope 밖으로 hoist(위에 고정)되어 여러개의 var과 조건문의 결합으로 정보를 조작할수 있는 선언문입니다.",
    "point": 1
  }
]
